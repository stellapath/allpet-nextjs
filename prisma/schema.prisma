// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Asset {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  type     AssetType
  fileName String
  filePath String
  fileHash String
}

enum AssetType {
  STATIC
  ANIMATION
}

model Account {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?   @unique
  hashedPassword String?
  snsId          String?
  snsType        SNSType?
  isAdmin        Boolean   @default(false)
  user           User?
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?
}

enum SNSType {
  KAKAO
  APPLE
}

model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  phone              String               @unique
  name               String
  profileImage       String?
  isPushEnabled      Boolean              @default(false)
  lastAdSeenAt       DateTime?
  lastCheckedInAt    DateTime?
  weeklyCheckInCount Int                  @default(0)
  ownedPets          UserOwnedPet[]
  ownedItems         UserOwnedItem[]
  ownedFurnitures    UserOwnedFurniture[]
  room               Room?
  hasGuideShownAt    DateTime?
  account            Account              @relation(fields: [accountId], references: [id])
  accountId          String               @unique @db.ObjectId
}

model Pet {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  avatar String
  type   PetType
}

enum PetType {
  DOG
  CAT
}

model PetAsset {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  colorName String
}

model PetEvent {
  id      String       @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  type    PetEventType @default(COMMON)
  assetId String       @db.ObjectId
}

enum PetEventType {
  COMMON // 이동, 밥먹기 등
  SPECIAL
}

model Item {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  assetId String   @db.ObjectId
  type    ItemType
}

enum ItemType {
  FEED
  TOY
  MEDICINE
}

model Furniture {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  assetId String @db.ObjectId
  width   Int
  height  Int
  price   Int
}

model UserOwnedPet {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @db.ObjectId
  petId        String    @db.ObjectId
  customName   String
  exp          Int       @default(0)
  birthday     DateTime  @default(now())
  adoptionDay  DateTime  @default(now())
  lastBathAt   DateTime?
  lastFeedAt   DateTime?
  lastCuredAt  DateTime?
  lastPlayedAt DateTime?
}

model UserOwnedItem {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  itemId String @db.ObjectId
  count  Int
}

model UserOwnedFurniture {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  user        User   @relation(fields: [userId], references: [id])
  userId      String @db.ObjectId
  furnitureId String @db.ObjectId
}

model RoomPlacedPet {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  userOwnedPetId String @db.ObjectId
  Room           Room   @relation(fields: [roomId], references: [id])
  roomId         String @db.ObjectId
}

model RoomPlacedFurniture {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  userOwnedFurnitureId String  @db.ObjectId
  x                    Int
  y                    Int
  zIndex               Int
  isFlipped            Boolean
  Room                 Room    @relation(fields: [roomId], references: [id])
  roomId               String  @db.ObjectId
}

model Room {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  user        User                  @relation(fields: [userId], references: [id])
  userId      String                @unique @db.ObjectId
  pets        RoomPlacedPet[]
  petId       String                @db.ObjectId
  furnitures  RoomPlacedFurniture[]
  furnitureId String                @db.ObjectId
}
